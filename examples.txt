true
let x = true in x
if false then true else false
0
succ (succ (succ 0))
3
succ (pred 0)
iszero (pred (succ (succ 0)))
if iszero 3 then 0 else 1
iszero true
if 1 then true else false
if iszero 3 then 0 else false
let id = Lx.x in id 3
let id_bool = L x:Bool. x in id_bool true
let id_nat = L x:Nat. x in id_nat 5
let x = 5 in let id_nat = L x:Nat. x in id_nat x
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in 
    let sumaux = lambda f. (lambda n. (lambda m. if (iszero n) then m else succ (f (pred n) m))) in 
    let sum = fix sumaux in 
    sum 21 34;;
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in
    let sumaux = lambda f. (lambda n: Nat. (lambda m: Nat. if (iszero n) then m else succ (f (pred n) m))) in 
    let sum = fix sumaux in let prodaux = lambda f. (lambda n. (lambda m. if (iszero m) then 0 else sum n (f n (pred m)))) in 
    let prod = fix prodaux in 
    prod 12 5;;


--2.1-----------------------------------------------------------------------------------------------------
##Sum##
letrec sum : Nat -> Nat -> Nat =
    lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in 
sum 21 34 ;;

##Product##
letrec sum : Nat -> Nat -> Nat =
    lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) 
in letrec prod : Nat -> Nat -> Nat =
    lambda m : Nat. lambda n : Nat. if iszero m then 0 else sum n ( prod (pred m) n)
in Lx: Nat. Ly: Nat. prod x y;;

##Factorial##
letrec sum : Nat -> Nat -> Nat =
    lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) 
in letrec prod : Nat -> Nat -> Nat =
    lambda m : Nat. lambda n : Nat. if iszero m then 0 else sum n ( prod (pred m) n)
in letrec fact : Nat -> Nat =
    lambda n : Nat. if iszero n then 1 else prod n (fact (pred n))
in fact 4;;

##Fibonacci
letrec sum : Nat -> Nat -> Nat =
    lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) 
in letrec fib : Nat -> Nat =
    lambda n : Nat. if iszero n then 0 else if iszero (pred n) then 1 else sum (fib (pred n)) (fib (pred (pred n)))
in fib 5;;

--/2.1/------------------------------------------------------------------------------------------------------------------

--2.2------------------------------------------------------------------------------------------------------------------
cinco = 5;;

sum = letrec sum : Nat -> Nat -> Nat =
    lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in 
Lx: Nat. Ly: Nat. sum x y;;

prod = letrec prod : Nat -> Nat -> Nat =
    lambda m : Nat. lambda n : Nat. if iszero m then 0 else sum n ( prod (pred m) n)
in Lx: Nat. Ly: Nat. prod x y;;

fact = letrec fact : Nat -> Nat =
    lambda n : Nat. if iszero n then 1 else prod n (fact (pred n))
in Lx: Nat. fact x;;

fib = letrec fib : Nat -> Nat =
    lambda n : Nat. if iszero n then 0 else if iszero (pred n) then 1 else sum (fib (pred n)) (fib (pred (pred n)))
in Lx: Nat. fib x;;

sum cinco cinco;;
prod cinco cinco;;
fact cinco;;
fib cinco;;

s1 = "hola";;
n1 = 1;;
btrue = true;;
--/2.2/------------------------------------------------------------------------------------------------------------------

--2.3--------------------------
s1 = "hola";;
s2 = " mundo!";;
s3 = s1 ++ s2;;

(++) s1 s2;;
s3;;
--/2.3/------------------------

--2.4------------------------
{true,10};;
{{true,false},{2},3};;

{{true,false},{2},3}.1.2;;
{{true,false},{2},3}.2;;
{{true,false},{2},3}.3;;
{{true,false},{2},3}.4;;
--/2.4/----------------------

--2.5-------------------
registro=[num=1,
bool=true,
reg=[
    tupla={
        [tupla2={false,false,true},
        num2=2],
        2
        }
    ]
];;
registro.reg.tupla.1.tupla2.3;;
[tupla={01,{11,{21,{31},{32,33,[subtupla={41,{51}}]},22}}}].tupla.2.2.3.3.subtupla.2.1;;
--/2.5/-----------------

--2.8--------
unit;;
();;
unit;unit;;
();();;
();1;;
unit;{1,2};;
--/2.8/-------